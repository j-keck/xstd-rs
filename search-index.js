var searchIndex={};
searchIndex["xstd"] = {"doc":"extended standard library","i":[[0,"iter","xstd","iterator",null,null],[3,"IntersperseIter","xstd::iter","Intersperse the given element between the elements of the…",null,null],[3,"MementoIter","","Iterator with memory. Knows the actual and previous…",null,null],[11,"cur","","Returns the current element",0,[[["self"]],["option"]]],[11,"prev","","Returns the previous element",0,[[["self"]],["option"]]],[8,"IntersperseIterAdapter","","",null,null],[11,"intersperse","","",1,[[],["intersperseiter"]]],[8,"MementoIterAdapter","","",null,null],[11,"memento","","",2,[[],["mementoiter"]]],[0,"vec","xstd","vector",null,null],[8,"Unlines","xstd::vec","Joins a `Vec<&str>` with separating newlines in a…",null,null],[10,"unlines","","",3,[[["self"]],["string"]]],[8,"Unwords","","Joins a `Vec<&str>` with separating spaces in a `String`.",null,null],[10,"unwords","","",4,[[["self"]],["string"]]],[0,"stream","xstd","streams",null,null],[3,"Unique","xstd::stream","Creates a Stream which skips already emitted elements.",null,null],[11,"new","","",5,[[["f"],["st"]],["unique"]]],[8,"UniqueBy","","",null,null],[11,"unique_by","","",6,[[["f"]],["unique"]]],[0,"macros","xstd","macros",null,null],[0,"dynamic","","reflection",null,null],[8,"IsInstanceOf","xstd::dynamic","provides `is_instance_of::<T>()` for types which are…",null,null],[11,"is_instance_of","","",7,[[["self"]],["bool"]]],[0,"prelude","xstd","use the `prelude` to import all extensions `use…",null,null],[14,"ifte","","if, then, else `use xstd::prelude::*; assert_eq!(1, ifte!(…",null,null],[11,"from","xstd::iter","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","xstd::stream","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"try_poll_next","","",5,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"next","xstd::iter","",8,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll_next","xstd::stream","",5,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"intersperse","xstd::iter","",1,[[],["intersperseiter"]]],[11,"memento","","",2,[[],["mementoiter"]]],[11,"unique_by","xstd::stream","",6,[[["f"]],["unique"]]]],"p":[[3,"MementoIter"],[8,"IntersperseIterAdapter"],[8,"MementoIterAdapter"],[8,"Unlines"],[8,"Unwords"],[3,"Unique"],[8,"UniqueBy"],[8,"IsInstanceOf"],[3,"IntersperseIter"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);